#!/bin/bash
# info: adding letsencrypt ssl cetificate for domain
#
# The function turns on SSL support for a domain. Parameter ssl_dir is a path
# to directory where 2 or 3 ssl files can be found. Certificate file 
# domain.tld.crt and its key domain.tld.key  are mandatory. Certificate
# authority domain.tld.ca file is optional. If home directory  parameter
# (ssl_home) is not set, https domain uses public_shtml as separate
# documentroot directory.


#----------------------------------------------------------#
#                    Variable&Function                     #
#----------------------------------------------------------#

# Argument definition
user=admin
domain=$(hostname)

# Includes
source $VESTA/func/main.sh
source $VESTA/func/domain.sh
source $VESTA/conf/vesta.conf

# Another workaround for cron environment
PATH="$PATH:$BIN"
export PATH

API='https://acme-v02.api.letsencrypt.org'
#API='https://acme-staging-v02.api.letsencrypt.org'

# Additional argument formatting
format_identifier_idn() {
    identifier_idn=$identifier
    if [[ "$identifier_idn" = *[![:ascii:]]* ]]; then
        identifier_idn=$(idn -t --quiet -a $identifier_idn)
    fi
}

# encode base64
encode_base64() {
    cat |base64 |tr '+/' '-_' |tr -d '\r\n='
}

# Let's Encrypt v2 curl function
query_le_v2() {

    protected='{"nonce": "'$3'",'
    protected=''$protected' "url": "'$1'",'
    protected=''$protected' "alg": "RS256", "kid": "'$KID'"}'
    content="Content-Type: application/jose+json"

    payload_=$(echo -n "$2" |encode_base64)
    protected_=$(echo -n "$protected" |encode_base64)
    signature_=$(printf "%s" "$protected_.$payload_" |\
        openssl dgst -sha256 -binary -sign $USER_DATA/ssl/user.key |\
        encode_base64)

    post_data='{"protected":"'"$protected_"'",'
    post_data=$post_data'"payload":"'"$payload_"'",'
    post_data=$post_data'"signature":"'"$signature_"'"}'

    curl -s -i -d "$post_data" "$1" -H "$content"
}

find_user_by_domainname() {
    usr=""
    
    OLD_IFS=$IFS
    IFS=$'\n'
    for list_user in $(v-list-users | tail -n +3 | awk '{print $1}'); do
        if [ ! -z "$(v-list-web-domains $list_user | tail -n +3 | awk '{print $1}' | grep $1)" ];
        then
            usr=$list_user
        fi
    done
    IFS=$OLD_IFS
    
    echo $usr;
}

#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

is_object_valid 'user' 'USER' "$user"
is_object_unsuspended 'user' 'USER' "$user"
is_object_valid 'web' 'DOMAIN' "$domain"
is_object_unsuspended 'web' 'DOMAIN' "$domain"

#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Parsing domain data
get_domain_values 'web'

# Registering LetsEncrypt user account
$BIN/v-add-letsencrypt-user $user
if [ "$?" -ne 0  ]; then
    touch $VESTA/data/queue/letsencrypt.pipe
    sed -i "/ $domain /d" $VESTA/data/queue/letsencrypt.pipe
    send_notice "LETSENCRYPT" "Account registration failed"
    check_result $E_CONNECT "LE account registration" >/dev/null
fi

# Parsing LetsEncrypt account data
source $USER_DATA/ssl/le.conf
proto="http-01"

#Loading domainnames
countDomains=$(cat $VESTA/data/users/*/web.conf |grep -v "'$domain'" | wc -l)
aliases=""
OLD_IFS=$IFS
IFS=$'\n'
for domaindata in $(cat $VESTA/data/users/*/web.conf |grep -v "'$domain'"); do
    eval $domaindata
    if [ "$SUSPENDED" = "no" ]; then
        is_on_this_server="no"
        for ip in $(v-list-sys-ips | tail -n +3 | awk '{print $1}'); do
            if [ 0 -lt $(dig +short $DOMAIN | grep $ip | wc -l) ]; then
                is_on_this_server="yes"
            elif [ 0 -lt $(dig +short AAAA $DOMAIN | grep $ip | wc -l) ]; then
                is_on_this_server="yes"
            fi
        done
        
        if [ "$is_on_this_server" = "yes" ]; then
            response=$(curl -s --head  --request GET http://$DOMAIN)
            if echo $response | grep "200 OK" > /dev/null; then 
                aliases="$aliases,$DOMAIN"
            elif echo $response | grep "301 Moved Permanently" > /dev/null; then 
                aliases="$aliases,$DOMAIN"
            elif echo $response | grep "500 Internal Server Error" > /dev/null; then 
                aliases="$aliases,$DOMAIN"
            fi
        fi
    fi
    
    #echo $DOMAIN $is_on_this_server $(find_user_by_domainname "$DOMAIN")
    #if [ $countDomains -lt 50 ]; then
        #aliases="$aliases,mail.$DOMAIN"
    #fi
done
IFS=$OLD_IFS
aliases=$(echo $aliases | sed 's/^,//')

# Requesting nonce / STEP 1
answer=$(curl -s -I "$API/directory")
nonce=$(echo "$answer" |grep -i nonce |cut -f2 -d \ |tr -d '\r\n')
status=$(echo "$answer"|grep HTTP/ |tail -n1 |cut -f 2 -d ' ')
if [[ "$status" -ne 200 ]]; then
    check_result $E_CONNECT "Let's Encrypt nonce request status $status"
fi

# Placing new order / STEP 2
url="$API/acme/new-order"
payload='{"identifiers":['
for identifier in $(echo $domain,$aliases |tr ',' '\n' |sort -u); do
    format_identifier_idn
    payload=$payload'{"type":"dns","value":"'$identifier_idn'"},'
done
payload=$(echo "$payload"|sed "s/,$//")
payload=$payload']}'
answer=$(query_le_v2 "$url" "$payload" "$nonce")
nonce=$(echo "$answer" |grep -i nonce |cut -f2 -d \ |tr -d '\r\n')
authz=$(echo "$answer" |grep "acme/authz" |cut -f2 -d '"')
finalize=$(echo "$answer" |grep 'finalize":' |cut -f4 -d '"')
status=$(echo "$answer" |grep HTTP/ |tail -n1 |cut -f2 -d ' ')
if [[ "$status" -ne 201 ]]; then
    check_result $E_CONNECT "Let's Encrypt new auth status $status"
fi

# Requesting authorization token / STEP 3
for auth in $authz; do
    payload=''
    answer=$(query_le_v2 "$auth" "$payload" "$nonce")
    url=$(echo "$answer" |grep -A3 $proto |grep url |cut -f 4 -d \")
    token=$(echo "$answer" |grep -A3 $proto |grep token |cut -f 4 -d \")
    nonce=$(echo "$answer" |grep -i nonce |cut -f2 -d \ |tr -d '\r\n')
    status=$(echo "$answer"|grep HTTP/ |tail -n1 |cut -f 2 -d ' ')
    checkdomain=$(echo "$answer" | grep -A3 identifier|grep value | cut -f 4 -d \")
    if [[ "$status" -ne 200 ]]; then
        check_result $E_CONNECT "Let's Encrypt acme/authz bad status $status"
    fi
    
    # Accepting challenge / STEP 4
    domUser=$(find_user_by_domainname "$checkdomain")
    if [ "$WEB_SYSTEM" = 'nginx' ] || [ ! -z "$PROXY_SYSTEM" ]; then
        conf="$HOMEDIR/$domUser/conf/web/nginx.$checkdomain.conf_letsencrypt"
        sconf="$HOMEDIR/$domUser/conf/web/snginx.$checkdomain.conf_letsencrypt"

        echo 'location ~ "^/\.well-known/acme-challenge/(.*)$" {' \
                > $conf
        echo '    default_type text/plain;' >> $conf
        echo '    return 200 "$1.'$THUMB'";' >> $conf
        echo '}' >> $conf

        if [ ! -e "$sconf" ]; then
            ln -s "$conf" "$sconf"
        fi
        $BIN/v-restart-proxy
        check_result $? "Proxy restart failed" >/dev/null
    else
        well_known="$HOMEDIR/$domUser/web/$checkdomain/public_html/.well-known"
        acme_challenge="$well_known/acme-challenge"
        mkdir -p $acme_challenge
        echo "$token.$THUMB" > $acme_challenge/$token
        chown -R $domUser:$domUser $well_known
    fi
    $BIN/v-restart-web
    check_result $? "Web restart failed" >/dev/null
    

    # Requesting ACME validation / STEP 5
    validation_check=$(echo "$answer" |grep '"valid"')
    if [[ ! -z "$validation_check" ]]; then
        validation='valid'
    else
        validation='pending'
    fi

    # Doing pol check on status
    i=1
    while [ "$validation" = 'pending' ]; do
        payload='{}'
        answer=$(query_le_v2 "$url" "$payload" "$nonce")
        validation=$(echo "$answer"|grep -A1 $proto |tail -n1|cut -f4 -d \")
        nonce=$(echo "$answer" |grep -i nonce |cut -f2 -d \ |tr -d '\r\n')
        status=$(echo "$answer"|grep HTTP/ |tail -n1 |cut -f 2 -d ' ')
        if [[ "$status" -ne 200 ]]; then
            check_result $E_CONNECT "Let's Encrypt validation status $status"
        fi

        i=$((i + 1))
        if [ "$i" -gt 10 ]; then
            check_result $E_CONNECT "Let's Encrypt domain validation timeout"
        fi
        sleep 1
    done
    if [ "$validation" = 'invalid' ]; then
        check_result $E_CONNECT "Let's Encrypt domain verification failed"
    fi
done


# Generating CSR
ssl_dir=$($BIN/v-generate-ssl-cert "$domain" "info@$domain" "BE" "Antwerp" \
    "Geel" "Made I.T." "IT" "$aliases" |tail -n1 |awk '{print $2}')

# Signing CSR
csr=$(openssl req -in $ssl_dir/$domain.csr -outform DER |encode_base64)
payload='{"csr":"'$csr'"}'
answer=$(query_le_v2 "$finalize" "$payload" "$nonce")
nonce=$(echo "$answer" |grep -i nonce |cut -f2 -d \ |tr -d '\r\n')
status=$(echo "$answer"|grep HTTP/ |tail -n1 |cut -f 2 -d ' ')
certificate=$(echo "$answer"|grep 'certificate":' |cut -f4 -d '"')
if [[ "$status" -ne 200 ]]; then
    check_result $E_CONNECT "Let's Encrypt finalize bad status $status"
fi

# Downloading signed certificate / STEP 7
curl -s "$certificate" -o $ssl_dir/certificate.pem

# Splitting up downloaded pem
cat $ssl_dir/certificate.pem > $ssl_dir/certificate.crt

# Adding SSL
mv $ssl_dir/$domain.csr $ssl_dir/certificate.csr
mv $ssl_dir/$domain.key $ssl_dir/certificate.key

$BIN/v-change-sys-vesta-ssl "$ssl_dir"
if [ "$?" -ne '0' ]; then
    touch $VESTA/data/queue/letsencrypt.pipe
    sed -i "/ $domain /d" $VESTA/data/queue/letsencrypt.pipe
    send_notice 'LETSENCRYPT' "$domain certificate installation failed"
    check_result $? "SSL install" >/dev/null
fi

# Adding LE autorenew cronjob
if [ -z "$(grep v-update-lets $VESTA/data/users/admin/cron.conf)" ]; then
    min=$(generate_password '012345' '2')
    hour=$(generate_password '1234567' '1')
    cmd="sudo $BIN/v-update-letsencrypt-ssl"
    $BIN/v-add-cron-job admin "$min" "$hour" '*' '*' '*' "$cmd" > /dev/null
fi

# Updating letsencrypt key
if [ -z "$(grep "LETSENCRYPT" $VESTA/conf/vesta.conf)" ]; then
    echo "LETSENCRYPT='yes'" >> $VESTA/conf/vesta.conf
else
    sed -i "s/LETSENCRYPT=.*/LETSENCRYPT='yes'/g" $VESTA/conf/vesta.conf
fi


#----------------------------------------------------------#
#                       Vesta                              #
#----------------------------------------------------------#

# Restarting
$BIN/v-restart-mail $restart
$BIN/v-restart-service dovecot $restart
if [ "$restart" != "no" ]; then
    $BIN/v-restart-service vesta
    if [ "$?" -ne 0  ]; then
        send_notice 'LETSENCRYPT' "web server needs to be restarted manually"
    fi
fi

# Notifying user
send_notice 'LETSENCRYPT' "Admin dashboard SSL has been installed successfully"

# Deleteing task from queue
touch $VESTA/data/queue/letsencrypt.pipe
sed -i "/ $domain /d" $VESTA/data/queue/letsencrypt.pipe

# Logging
log_event "$OK" "$ARGUMENTS"

exit
